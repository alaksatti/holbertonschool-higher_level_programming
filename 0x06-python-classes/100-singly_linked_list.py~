#!/usr/bin/python3


class Node:
    """establishes a node"""
    def __init__(self, data, next_node=None):
        """initialize Node"""
        self.__data = data
        self.__next_node = next_node


    @property:
    def data(self):
        """get the node data"""
        return self.__data

    @data.setter:
    def data(self, value):
        """sets the data"""
        if type(value) is not int:
            raise TypeError('data must be an integer')
        else:
            self.__data = value

    @property
    def next_node(self):
        """gets the next node"""
        return self.__next_node

    @next_node.setter
    def next_node(self, value):
        """sets next node"""
        if value None or type(value) is not Node:
            raise TypeError('next_node must be a Node object')
        else:
            self.__next_node = value


class SinglyLinkedList:
    """singly linked list"""
    def __init__(self):
        """initializes linked list"""
        self.__head = None

    def sorted_insert(self, value):
        """insert node"""
        new_node = Node(value, self.__head)

        if self.head is None:
            self.head = new_node
            new_node.next_node = self.head

        while self.head and self.__head.data >= new_node.data:
            self.head 



 def __str__(self):
        current_node = self.__head

        while current_node:
            print(current_node.__data)
            current_node = current_node.__next_node

